import { Injectable } from '@angular/core';
import * as breeze from 'breeze-client';
// tslint:disable:no-submodule-imports
import 'breeze-client-labs/breeze.labs.dataservice.abstractrest';
import 'breeze-client-labs/breeze.labs.dataservice.sharepoint';
import 'breeze-client-labs/breeze.namingConventionWithDictionary';
import * as eb from '../models/_entity-base';
import { EmProviderConfig } from './em-provider-config';
import { SpDataRepoService } from './sp-data-repo.service';

@Injectable({ providedIn: 'root' })
export class EmProviderService {
    activate = false;
    entityManager: breeze.EntityManager;
    servicePoint: string;
    isInitializer = false;
    // userService = {} as any;
    // config = {
    //   entities: [],
    //   serviceEndpoint: '',
    //   nameSpace: ''
    // };
    constructor(private spData: SpDataRepoService, private config: EmProviderConfig) { this.init(); }

    protected init(): void {
        if (this.isInitializer) { return; }
        const dataAdapter = breeze.config.initializeAdapterInstance('dataService', 'SharePointOData', true) as any;

        dataAdapter.getRequestDigest = () => this.spData.getRequestDigest(this.spData.situeUrl + this.config.serviceEndpoint);

        const clientToServerNameDictionary = {
            'SpConfigData:#SP.Data.Aagt': { configKey: 'Title' }
        };
        const nc = breeze.NamingConvention as any;
        const convention = new nc.NamingConventionWithDictionary(
            'spNameConv', breeze.NamingConvention.camelCase, clientToServerNameDictionary);

        convention.setAsDefault();

        const dataService = new breeze.DataService({
            serviceName: `${this.spData.situeUrl}${this.config.serviceEndpoint}/_api/web`,
            hasServerMetadata: false
        });
        this.servicePoint = dataService.serviceName;
        this.entityManager = new breeze.EntityManager({ dataService });

        const metaHelper = new breeze.config.MetadataHelper(this.config.nameSpace, breeze.AutoGeneratedKeyType.Identity);

        const store = this.entityManager.metadataStore;

        this.config.entities.forEach(entity => {
            const e = new entity() as eb.MetadataBase<eb.SpEntityBase>;
            const type = metaHelper.addTypeToStore(store,
                e.entityDefinition as any) as breeze.EntityType;
            store.registerEntityTypeCtor(type.shortName,
                e.metadataFor, e.initializer);

        });
    }
}
