import { Injectable } from '@angular/core';
import { CustomDataServiceUtils } from '../service-adapter/sp-dataservice-utils';

import {
    EntityManager,
    AutoGeneratedKeyType,
    config,
    DataService,
    EntityType,
    NamingConvention
} from 'breeze-client';

import * as eb from '../models/_entity-base';
import { EmProviderConfig } from './em-provider-config';
import { BehaviorSubject } from 'rxjs';
import { AppUserService } from './app-user.service';
import { CustomNameConventionService } from '../service-adapter/custom-namingConventionDict';
import { CustomMetadataHelperService } from '../service-adapter/custom-metadata-helper';
import { SpODataDataService } from '../service-adapter/sharepoint-odata-dataservice';

@Injectable({ providedIn: 'root' })
export class EmProviderService {
    activate = false;
    entityManager: EntityManager ;
    servicePoint: string;
    onRequestDigestChange: BehaviorSubject<string>;

    constructor(private emCfg: EmProviderConfig,
        private utils: CustomDataServiceUtils,
        private metadataHelper: CustomMetadataHelperService,
        private spODataServ: SpODataDataService,
        private namingDict: CustomNameConventionService,
        private appUserSvc: AppUserService) {
        this.init();
    }

    protected init(): void {
        const dataAdapter = config.initializeAdapterInstance('dataService', 'SpODataService', true) as any;
        dataAdapter.utils = this.utils;
        const clientToServerNameDictionary = {
            'SpConfigData:#SP.Data.Aagt': { configKey: 'Title' },
            'ActionItem:#SP.Data.Aagt': { action: 'Title' },
            'Asset:#SP.Data.Aagt': { alias: 'Title' }
        };
        this.appUserSvc.onRequestDigestChange
        .subscribe(digest => {
            this.utils.requestDigest = digest;
        });

        // @ts-ignore
        const convention = this.namingDict.createNameDictionary(
            'spNameConv', NamingConvention.camelCase, clientToServerNameDictionary);

        convention.setAsDefault();

        const dataService = new DataService({
            serviceName: `${this.appUserSvc.appConfigDate.siteUrl}/${this.emCfg.serviceEndpoint}_api/web`,
            hasServerMetadata: false
        });
        this.servicePoint = dataService.serviceName;
        this.entityManager = new EntityManager({ dataService });

        this.metadataHelper.defaultNamespace = this.emCfg.nameSpace;
        this.metadataHelper.defaultAutoGenKeyType = AutoGeneratedKeyType.Identity;

        const store = this.entityManager.metadataStore;

        this.emCfg.entities.forEach(entity => {
            const e = new entity() as eb.MetadataBase<eb.SpEntityBase>;
            const type = this.metadataHelper.addTypeToStore(store,
                e.entityDefinition as any) as EntityType;
            store.registerEntityTypeCtor(type.shortName,
                e.metadataFor, e.initializer);
            e.addDefaultSelect(type);
        });
    }

}
