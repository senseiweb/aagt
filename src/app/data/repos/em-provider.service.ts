import { Injectable } from '@angular/core';
import * as breeze from 'breeze-client';
import * as eb from '../models/_entity-base';
import 'breeze-client-labs/breeze.labs.dataservice.abstractrest';
import 'breeze-client-labs/breeze.namingConventionWithDictionary';
import 'breeze-client-labs/breeze.labs.dataservice.sharepoint';
import { SpDataRepoService } from './sp-data-repo.service';

export class EmProviderConfig {
  entities: Array<eb.Instantiable<eb.MetadataBase<eb.SpEntityBase>>>;
  nameSpace: string;
  serviceEndpoint: string;
}

@Injectable({
  providedIn: 'root'
})
export class EmProviderService {
  activate = false;
  entityManager: breeze.EntityManager;
  servicePoint: string;
  // userService = {} as any;
  // config = {
  //   entities: [],
  //   serviceEndpoint: '',
  //   nameSpace: ''
  // };
  constructor(
    private spData: SpDataRepoService,
    private config: EmProviderConfig
  ) {

    const dataAdapter = breeze.config.initializeAdapterInstance('dataService', 'SharePointOData', true) as any;

    dataAdapter.getRequestDigest = () => this.spData.getRequestDigest(config.serviceEndpoint);

    const clientToServerNameDictionary = {
      'SpConfigData:#SP.Data.Aagt': { configKey: 'Title' }
    };
    const nc = <any> breeze.NamingConvention;
    const convention = new nc.NamingConventionWithDictionary(
      'spNameConv', breeze.NamingConvention.camelCase, clientToServerNameDictionary);

    convention.setAsDefault();

    const dataService = new breeze.DataService({
      serviceName: `${_spPageContextInfo.siteAbsoluteUrl}/${this.config.serviceEndpoint}`,
      hasServerMetadata: false
    });
    this.servicePoint = dataService.serviceName;
    this.entityManager = new breeze.EntityManager({ dataService: dataService });

    const metaHelper = new breeze.config.MetadataHelper(this.config.nameSpace, breeze.AutoGeneratedKeyType.Identity);

    const store = this.entityManager.metadataStore;

    this.config.entities.forEach(entity => {
      const e = new entity() as eb.MetadataBase<eb.SpEntityBase>;
      const type = metaHelper.addTypeToStore(store,
        e.entityDefinition as any) as breeze.EntityType;
      store.registerEntityTypeCtor(type.shortName,
        e.metadataFor, e.initializer);

    });
  }
}
